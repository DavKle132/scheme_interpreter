#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 6711 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; UTILITY FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; Converts a scheme-expression into a string"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; INPUT: a scheme-expression EXP"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; OUTPUT: a SCHEME String corresponding to EXP"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 11 #"exp->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; INPUT: a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; OUTPUT: a list containing all elements of the first-level lists"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 14 3 13 #"list-of-lists"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 13 #"list-of-lists"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"list-of-lists"
0 0 24 3 3 #") ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"list-of-lists"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; this is for all error handling."
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; programmers don't use this function but"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; the interpreter calls this function to"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; signal some type of programmer error"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"ERROR: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; THERE ARE TWO SUPPORTED TYPES: 'int and 'boolean"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; INPUT: an element of the ART-C language"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; OUTPUT: the type of that element"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; A MAP is a list of key-value pairs"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; INPUT: a MAP and a KEY"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; OUTPUT: The value associated with the key or 'error"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-get"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")) "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-get"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; INPUT : A MAP AND KEY"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; OUTPUT : true if the key is in the map and false otherwise"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")) "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"map-contains"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; INPUT : A MAP, KEY and VALUE"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; OUTPUT: The map that results from replacing the key with the new "
 #"value.  If"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";; the map doesn't contain KEY, then 'error is returned"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"map-replace"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")) "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #") ("
0 0 14 3 11 #"map-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; INPUT : A MAP, Key and Value"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; OUTPUT : The map that results from adding a key-value pair.  This"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; allows for duplicate keys (the most-recently added is nearer the "
 #"front of the list"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-add"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 3 #"map"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; INPUT: A MAP and KEY"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; OUTPUT: The map that results from deleting the key.  No errors oc"
 #"cur if the map"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; doesn't contain the key"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"map-delete"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 14 3 3 #"map"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 3 #")) "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"map-delete"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; TYPEMAP : A SEMANTIC DOMAIN DATA TYPE"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; A typemap is a list of block-level declarations."
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; FORM: ((var1 type1) (var2 type2) (var3 type3) ... )"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; INPUT: NONE"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; OUTPUT: AN empty typemap"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"typemap-create-empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; INPUT: A TYPEMAP"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; OUTPUT: The type of variable x"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"typemap-type-of"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"map-get"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; INPUT: A TYPEMAP"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; OUTPUT: THE TYPEMAP THAT RESULTS FROM INSERTING A DECLARATIONS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"typemap-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 4 #"decl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"map-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"decl"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"decl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typemap-delete"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"map-delete"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; STATE : A SEMANTIC DOMAIN DATA TYPE"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; A LIST OF (VAR, VALUE) pairs"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; FORM :  ( (var1 val1) (var2 val2) ... )"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; NOTE: A map can contain duplicate keys but innermost KEYS occur"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;       before outermost KEYS and hide them"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; INPUT : NONE"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; OUTPUT: AN EMPTY STATE"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-create-empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; INPUT: STATE and ID"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; OUTPUT: a new state such that the innermost scope now contains a"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;         new binding for the specified ID.  The bindings value is "
 #"'undefined."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"state-add"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"map-add"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; INPUT : STATE and ID"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; OUTPUT: A new state such that the innermost id is removed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"state-delete"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"map-delete"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; INPUT: STATE and ID"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; OUTPUT: The value associated with the specified ID in the given s"
 #"tate"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"map-get"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; INPUT: STATE and ID"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; OUTPUT: A new state that results from changing the mapping from i"
 #"d->value in"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         the specified state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"state-update"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"map-replace"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; INPUT: STATE and LIST-OF-IDS (VARIABLES)"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; OUTPUT: A new state that results from deleting all ids (the varia"
 #"bles) from"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         the specified state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-delete-all"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-delete-all"
0 0 24 3 2 #" ("
0 0 14 3 12 #"state-delete"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; THESE CLASSES CORRESPOND TO THE ABSTRACT SYNTAX SUCH THAT A \"PRO"
 #"GRAM\""
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; REPRESENTS A PARSE-TREE.  THESE FUNCTIONS OPERATE AT THE 'SYNTACT"
 #"IC' LEVEL"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";; (PROGRAM BODY)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"program-get-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; (BLOCK S1...SN)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"block-get-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-declaration?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"block-get-declarations"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"is-declaration?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; (DECLARE TYPE VAR)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"declaration-get-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"declaration-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-declaration?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; (:= VAR EXP)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; (IF TEST THEN [ELSE])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"if-get-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"if-get-then"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-has-else?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"if-get-else"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; (WHILE TEST BODY)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"while-get-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"while-get-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; (SPRINT LABEL EXP)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"sprint-has-exp?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"sprint-get-label?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sprint-get-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; INPUT: an expression EXP"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; OUTPUT: the operator of EXP (an element of ART-C)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"exp-get-operator"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; INPUT: an expression EXP"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; OUTPUT: the left-operand (an expression) of EXP"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"exp-get-left-operand"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; INPUT: an expression EXP"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; OUTPUT: the exp-get-right-operand (an expression) of EXP"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"exp-get-right-operand"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; INPUT: an expression EXP"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; OUTPUT: #t if the expression is a boolean literal and #f otherwis"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; INPUT: a symbol"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; OUTPUT: #t if the symbol is 'true and #f if it is 'false and 'voi"
 #"d' if neither"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"symbol->bool"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bool->symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; INPUT: A PROGRAM"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; A PROGRAM has syntactic structure (program stmt)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; OUTPUT: THE STATE that results from executing the program"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;         in an empty state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"interpret-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 16 #"program-get-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 18 #"state-create-empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; This is the INTERPRETER class"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; An INTERPRETER is simply a collection of functions that"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; operates on TYPES, STATES, BINDING, SCOPES and PROGRAMS"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 62
#" |                            Start of code writted by David K"
0 0 17 3 35 #"lein                              |"
0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 22 #" |                    "
0 0 17 3 75
(
 #"      Start of functions for \"is-program-valid?                    "
 #"       |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"#| VALID PROGRAM? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"is-program-valid?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 20 #"typemap-create-empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| VALID BLOCK? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"kind"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 18 #"valid-declaration?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 11 #"typemap-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #":="
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-assignment?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-if?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-sprint?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 12 #"valid-while?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 25 #")))                      "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"#| VALID DECLARATION? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"valid-declaration?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-alpha"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-upcase"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"not"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"#| IS ALPHA |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-alpha"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"G\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"H\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"J\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"K\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"N\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"P\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Q\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"S\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"V\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"#| VALID ASSIGNMENT? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-assignment?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 17 #"valid-expression?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"typemap-type-of"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"get-type-of"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"#| GET TYPE OF |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-type-of"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"#| VALID EXPRESSION? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-expression?"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"#| VALID INTEGER? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"real?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 11 #"-2147483648"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 10 #"2147483647"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"#| VALID IF? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-if?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 17 3 17 #";;;Else statement"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"valid-statement?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"valid-statement?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 17 3 20 #";;;No else statement"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"valid-statement?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| BOOLEAN-EXP? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are integer"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are boolean"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 36 #";;;Arity = 1 and Operator is boolean"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 58
#";;;Not a list, single element boolean. Variable or Literal"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 17 3 12 #";;;Variable?"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"typemap-type-of"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| INTEGER EXP? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are integer"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"@"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"integer-exp?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 54 #";;;Not a list, single element int. Variable or Literal"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 17 3 12 #";;;Variable?"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"typemap-type-of"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"#| VALID STATEMENT? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"valid-statement?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"kind"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"valid-block?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #":="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 17 #"valid-assignment?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"valid-if?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"valid-sprint?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"valid-while?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"#| VALID SPRINT? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-sprint?"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"valid-expression?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"spr"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| VALID WHILE? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"valid-while?"
0 0 24 3 1 #" "
0 0 14 3 3 #"whl"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 12 #"boolean-exp?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"whl"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"valid-statement?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"whl"
0 0 24 3 2 #") "
0 0 14 3 2 #"tm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                              Start of code for State \"Class\"   "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 92
(
 #"   The code define below if very similar to the Map and State \"Clas"
 #"ses\" predefined, but they"
) 0 0 17 29 1 #"\n"
0 0 17 3 100
(
 #"   do not handle scope. The scope variable is simply an int that tha"
 #"t will increment the deeper into"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"   blocks the pgm delves. For the main block sc"
0 0 17 3 58
#"ope = 0 and it will increment by 1 for every nested block."
0 0 17 29 1 #"\n"
0 0 17 3 102
(
 #"   This allows the interpretter to simply remove the highest scope v"
 #"ariables after completing a nested"
) 0 0 17 29 1 #"\n"
0 0 17 3 9 #"   block."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"   NEW STATE"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"   Input :"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"   Output: '()"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"   ST"
0 0 17 3 10 #"ATE INSERT"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"   Input : A state, var, val, scope"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"   Output: (cons '(var, val, scope) state)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"state-insert"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"   STATE CONTAINS"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : A state, var"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"   Output: #t if var is in state"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"           #f if var isn't in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"state-contains"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"   STATE REPLACE"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"   Input : A state, var, val"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"   Output: S"
0 0 17 3 26 #"tate, but the previous val"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"           associated with var is replaced"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"           with val"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"state-replace"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 13 #"state-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   REMOVE HIGHEST SCOPE"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"   Input : A state"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"   Output: The state with the highest scope variables removed"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"remove-highest-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"remove-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 5 #"large"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"   GET HIGHEST SCOPE"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"   Input : A state"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"   Output: The highest scope value"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"large"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"large"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"large"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-highest-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"large"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"   REMOVE SCOPE"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"   Input : A state, scope"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"   Output: The state with all vars"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"           where the s"
0 0 17 3 12 #"cope doesn't"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"           equal scope"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"remove-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"remove-scope"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"remove-scope"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"   REMOVE VAR"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : A state, var"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"   Output: The state after removing"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"           the element that equals?"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"           var"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"remove-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"   TYPE OF VAR"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"   Input : A var"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"   Output: The type of var"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"type-of"
0 0 24 3 2 #" ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                               Start of code for \"interpret\"    "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"#| Thi"
0 0 17 3 26 #"s is the INTERPRETER class"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"   An INTERPRETER is simply a collection of functions that"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"   operates on TYPES, STATES, BINDING, SCOPES and PROGRAMS"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"interpret-program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"#|(define pgm '(program "
0 0 17 29 1 #"\n"
0 0 17 3 19 #"              (bloc"
0 0 17 3 1 #"k"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"               (declare int n)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"               (declare boolean error)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"               (declare int result)   "
0 0 17 29 1 #"\n"
0 0 17 3 31 #"               (:= error false)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"               (:= result 1)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"               (block "
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                (declare int local)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (:= n 5)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                (:= local n)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"                (while (> local 0)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"                       (block"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                        (:= result (* result local))"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"                        (:= local (- local 1)))))"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"              (sprint \"result: \" result)"
0 0 17 29 1 #"\n"
0 0 17 3 57
#"              (if (! error) (sprint \"a\") (sprint \"b\")))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"(interpret-program pgm)|#"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"   INTERPRET"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"   Input : A statement, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"           executing STATEMENT in STATE"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"kind"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 3 #") ("
0 0 14 3 21 #"interpret-declaration"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #":="
0 0 24 3 3 #") ("
0 0 14 3 20 #"interpret-assignment"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 12 #"interpret-if"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 3 #") ("
0 0 14 3 16 #"interpret-sprint"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 9 #"))       "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"statement expected but saw (\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 19 3 15 #"\"...) instead.\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                           Start of code for \"Interpret Block\"  "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"   INTERPRET BLOCK"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"   Input : A block, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"           executing block in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 12 #"remove-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"kind"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 21 #"interpret-declaration"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"  "
0 0 14 3 5 #"scope"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #":="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 20 #"interpret-assignment"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 12 #"interpret-if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 16 #"interpret-sprint"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-highest-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 5 #"scope"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"#|-"
0 0 17 3 94
(
 #"--------------------------------------------------------------------"
 #"-------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                        Start o"
 #"f code for \"Interpret Declaration\"                             |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"   INTERPRET DECLARATION"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"   Input : A declaration, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"           executing declaration in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"interpret-declaration"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 24 #"valid-declaration-state?"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"state-insert"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 5 #"scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Invalid Declaration\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"#| VALID DECLARATION STATE |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"valid-declaration-state?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-alpha"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-upcase"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"not"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dclr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"#| IS ALPHA |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-alpha-state?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"G\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"H\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"J\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"K\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"N\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"P\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Q\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"S\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"V\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 3 #" | "
0 0 17 3 94
(
 #"                        Start of code for \"Interpret Assignment\"  "
 #"                           |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   INTERPRET ASSIGNMENT"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"   Input : A assignment, state"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"   O"
0 0 17 3 34 #"utput: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"           executing assignment in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"interpret-assignment"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 23 #"valid-assignment-state?"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"state-replace"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 24 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Invalid Assignment\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"   EVALUATE"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"   Input : A expression and state"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"   Output: The value resulting from"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"           evaluating the expression"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 19 #"boolean-expression?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"bool->symbol"
0 0 24 3 2 #" ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 19 #"integer-expression?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"   EVALUATE BOO"
0 0 17 3 4 #"LEAN"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : A expression"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"   Output: The boolean resulting from"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"           evaluating the expression"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"to-boolean"
0 0 24 3 2 #" ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"to-boolean"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"="
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"<="
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #">="
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"&"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"%"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"~"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"   EVALUATE INTEGER"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : A expression"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"   Output: The integer resulting from"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"           evaluating the expression"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"-"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"/"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"@"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"@"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"?"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Invalid binary arithmetic expression\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"-"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"integer-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Invalid unary arithmetic expression\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 19 3 31 #"\"Invalid arithmetic expression\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"#| TO BOOLEAN |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"to-boolean"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"#| BOOLEAN EXPRESSION |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"boolean-expression?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"~"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"#| INTEGER EXPRESSION |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"integer-expression?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"@"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"?"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"#| VALID ASSIGNMENT? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"valid-assignment-state?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"valid-expression-state?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 17 #"get-type-of-state"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"state-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"valid-expression-state?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"assignment-get-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"#| GET TYPE OF |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-type-of-state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"#| VALID EXPRESSION? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"valid-expression-state?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| BOOLEAN-EXP? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are integer"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are boolean"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 36 #";;;Arity = 1 and Operator is boolean"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 58
#";;;Not a list, single element boolean. Variable or Literal"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 17 3 12 #";;;Variable?"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"#| INTEGER EXP? |#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 17 3 38 #";;;Arity = 2 and Operators are integer"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"@"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"integer-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 17 3 54 #";;;Not a list, single element int. Variable or Literal"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 17 3 12 #";;;Variable?"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"map-contains"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                            Start of code for interpret \"if\"    "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"   INTERPRET IF"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"   Input : A if, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"           executing if in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"interpret-if"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Invalid Boolean\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"   INTERPRET STATEMENT"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"   Input : A statement, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"           executing a statement"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"           in the given state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"kind"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"declare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 21 #"interpret-declaration"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #":="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 20 #"interpret-assignment"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 12 #"interpret-if"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"sprint"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"interpret-sprint"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-highest-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                          Start of code for interpret \"sprint\"  "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"   INTERPRET SPRINT"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"   Input : A sprint, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"           executing sprint in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"interpret-sprint"
0 0 24 3 1 #" "
0 0 14 3 6 #"sprint"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"sprint"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"sprint"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 15 #"state-get-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"sprint"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"sprint"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                           Start of code for interpret \"while\"  "
 #"                              |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"   INTERPRET WHILE"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"   Input : A while, state"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"   Output: The state that results from"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"           executing whle in state"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 18 #"boolean-exp-state?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 16 #"boolean-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cdaddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-highest-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Invalid boolean expression\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"#|------------------------------------------------------------------"
 #"----------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #" |                     Start of code for operators used in \"interpr"
 #"et\"                          |"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #" |------------------------------------------------------------------"
 #"----------------------------|#"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"   EXPONENTIATION @"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"   Input : base, power"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"   Output: base^power"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"@"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 2 #" ("
0 0 14 3 1 #"@"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"   REMAINDER ?"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"   Input : numerator, denomin"
0 0 17 3 4 #"ator"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"   Output: numerator % denominator"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 9 #"numerator"
0 0 24 3 1 #" "
0 0 14 3 11 #"denominator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 9 #"numerator"
0 0 24 3 1 #" "
0 0 14 3 11 #"denominator"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"   LOGICAL AND &"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : bool1, bool2"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"   Output: bool1 LOGICAL AND bool2"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"&"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool1"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool1"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"   LOGICAL OR %"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"   Input : bool1, bool2"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"   Output: bool1 LOGICAL OR bool2"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"%"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool1"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool1"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"   LOGICAL NEGATION ~"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"   Input : bool"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"   Output: !bool"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"~"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0
